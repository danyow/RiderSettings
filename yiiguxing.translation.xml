<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="1654" />
    <option name="newTranslationDialogY" value="627" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="used just for dependency tracking" />
      <item value="Update After" />
      <item value="Fly Component" />
      <item value="A 2D rectangular mask that allows for clipping  masking of areas outside the mask." />
      <item value="         How it works:&#10;        &#10;         SoftMask overrides Shader used by child elements. To do it, SoftMask spawns invisible &#10;         SoftMaskable components on them on the fly. SoftMaskable implements IMaterialOverride,&#10;         which allows it to override the shader that performs actual rendering. Use of&#10;         IMaterialOverride is transparent to the user: a material assigned to Graphic in the &#10;         inspector is left untouched.&#10;        &#10;         Management of SoftMaskables is fully automated. SoftMaskables are kept on the child&#10;         objects while any SoftMask parent present. When something changes and SoftMask parent&#10;         no longer exists, SoftMaskable is destroyed automatically. So, a user of SoftMask&#10;         doesn't have to worry about any component changes in the hierarchy.&#10;        &#10;         The replacement shader samples the mask texture and multiply the resulted color &#10;         accordingly. SoftMask has the predefined replacement for Unity's default UI shader &#10;         (and its ETC1-version in Unity 5.4+). So, when SoftMask 'sees' a material that uses a&#10;         known shader, it overrides shader by the predefined one. If SoftMask encounters a&#10;         material with an unknown shader, it can't do anything reasonable (because it doesn't know&#10;         what that shader should do). In such a case, SoftMask will not work and a warning will&#10;&#9;&#9; be displayed in Console. If you want SoftMask to work with a custom shader, you can&#10;&#9;&#9; manually add support to this shader. For reference how to do it, see&#10;&#9;&#9; CustomWithSoftMask.shader from included samples.&#10;        &#10;         All replacements are cached in SoftMask instances. By default Unity draws UI with a&#10;         very small number of material instances (they are spawned one per maskingclipping layer),&#10;         so, SoftMask creates a relatively small number of overrides." />
      <item value="Compiled" />
      <item value="Ignore Case" />
      <item value=" TODO: provide an implementation of Unity.Debug that does not rely on UnityEngine and modernizes this API&#10;     (for now it's just here for easier compatibility and fwd migration)" />
      <item value="Debug" />
      <item value="错误" />
      <item value="Whole" />
      <item value="Whole Press" />
      <item value="Compute Job Optimization" />
      <item value="Retrieve the position data." />
      <item value="Instantiate flies along with the spawner entities." />
      <item value="Get a copy of the entity array. Don't directly use the iterator -- we're going to remove the spawner components, and it will invalidate the iterator." />
      <item value="Retrieve the mesh data." />
      <item value="Skip if it has no data." />
      <item value="Facet" />
      <item value="Persistent allocation." />
      <item value="Invalid allocation." />
      <item value="Other Indents" />
      <item value="Parenthesis" />
      <item value="翻译" />
      <item value="Indent style" />
      <item value="Tab Indents Alignment" />
      <item value="partial" />
      <item value="Blank Lines In Declarations" />
      <item value="Before single-line comment" />
      <item value="Inside" />
      <item value="Around region" />
      <item value="Blank Lines" />
      <item value="Braces Layout" />
      <item value="statement" />
      <item value="Empty braces formatting" />
      <item value="Allow comment after '{'" />
      <item value="Expressions (initializers, switch expressions, patterns) Use continuous line indent inside expression braces" />
      <item value="Block under &quot;case&quot; label" />
      <item value="Accessor declaration" />
      <item value="Property declaration" />
      <item value="Lambda and delegate (anonymous method declaration)" />
      <item value="Method declaration" />
      <item value="Indent inside namespace declaration" />
      <item value="Type and namespace declaration" />
      <item value="Upper Camel Case" />
      <item value="Simple Switch Sections" />
      <item value="End Comments" />
      <item value="Binary Expressions" />
      <item value="大于" />
      <item value="I Invocations Of The Same Method" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="134" />
        <entry key="ENGLISH" value="135" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1660058068936" />
  </component>
  <component name="Settings">
    <option name="autoPlayTTS" value="true" />
    <option name="keepFormat" value="true" />
    <option name="phoneticFontFamily" value="Sarasa Mono SC" />
    <option name="primaryFontFamily" value="Sarasa Mono SC" />
    <option name="showReplacementActionInContextMenu" value="true" />
  </component>
</application>